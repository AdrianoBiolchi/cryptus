{"version":3,"sources":["components/Header.js","components/PriceCard.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","react_default","a","createElement","className","href","alt","class","src","width","defaultProps","PriceCard","value","parseInt","isNaN","Math","round","header","label","ReactFC","fcRoot","FusionCharts","Charts","Widgets","FusionTheme","Body","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","BASE_URL","chartRef","state","btcusd","ltcusd","ethusd","showChart","initValue","dataSource","chart","caption","subCaption","xAxisName","yAxisName","numberPrefix","refreshinterval","slantLabels","numdisplaysets","labeldisplay","showValues","showRealTimeValue","theme","categories","category","clientDateTime","toString","dataset","data","chartConfigs","type","renderAt","height","dataFormat","getDataFor","_this2","setInterval","fetch","then","res","json","d","x_axis","y_axis","ticker","price","feedData","conversion","prop","_this3","mode","yAxisMaxValue","yAxisMinValue","setState","startUpdatingData","defineProperty","date_time","Date","curr_hour","getHours","addLeadingZero","getMinutes","getSeconds","components_PriceCard","btcbrl","ltcbrl","ethbrl","ReactFC_default","assign","onRender","getChartRef","bind","num","React","Component","App","components_Header","components_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45c2d83b.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar mb-3 pt-3 pb-3 py-0  text-sm-center text-md-left\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </a>\r\n        <ul className=\"navbar-nav mr-auto-right\" alt=\"fireSpot\">\r\n          <ul class=\"navbar-nav mr-auto\">\r\n            <li class=\"nav-item active\">\r\n              <img src={\"fclogo.svg\"} width=\"145\" alt=\"\" />\r\n            </li>\r\n          </ul>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\nHeader.defaultProps = {\r\n  branding: \"Real-Time Cryptocurrency Dashboard\"\r\n};\r\nexport default Header;","import React from 'react';\r\n\r\nconst PriceCard = (props) => {\r\n    const value = typeof parseInt(props.value) === 'number' && !isNaN(parseInt(props.value)) ? Math.round(parseInt(props.value)) : props.value;\r\n    return (\r\n        <div className=\"card mr-0 custom-card\">\r\n            <div className=\"card-body\">\r\n            < img src={props.src} alt={props.src} className = \"img-responsive float-right\"  />\r\n                <h6 className=\"card-title mb-4 \">{props.header} </h6>\r\n               \r\n                <h2 className=\"mb-1 text-primary\">${value}</h2>\r\n                <p className=\"card-text\"><small className=\"text-muted\">{props.label}</small></p>\r\n                \r\n            </div>  \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PriceCard;","import React from 'react';\r\nimport PriceCard from './PriceCard';\r\n//import axios from 'axios';\r\nimport FusionCharts from 'fusioncharts';\r\nimport Charts from 'fusioncharts/fusioncharts.charts';\r\nimport Widgets from 'fusioncharts/fusioncharts.widgets';\r\nimport ReactFC from 'react-fusioncharts';\r\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\r\n\r\nReactFC.fcRoot(FusionCharts, Charts, Widgets, FusionTheme);\r\n\r\nclass Body extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.BASE_URL = 'https://cors.io/?https://api.cryptonator.com/api/ticker/';\r\n        this.chartRef = null;\r\n        this.state = {\r\n            btcusd: '-',\r\n            ltcusd: '-',\r\n            ethusd: '-',\r\n            showChart: false,\r\n            initValue: 0,\r\n            dataSource : {\r\n                \"chart\": {\r\n                    \"caption\": \"Bitcoin Ticker\",\r\n                    \"subCaption\": \"\",\r\n                    \"xAxisName\": \"Local Time\",\r\n                    \"yAxisName\": \"BRL\",\r\n                    \"numberPrefix\": \"R$\",\r\n                    \"refreshinterval\": \"2\",\r\n                    \"slantLabels\": \"1\",\r\n                    \"numdisplaysets\": \"10\",\r\n                    \"labeldisplay\": \"rotate\",\r\n                    \"showValues\": \"0\",\r\n                    \"showRealTimeValue\": \"0\",\r\n                    \"theme\": \"fusion\"    \r\n                },\r\n                \"categories\": [{\r\n                    \"category\": [{\r\n                        \"label\": this.clientDateTime().toString()\r\n                    }]\r\n                }],\r\n                \"dataset\": [{\r\n                    \"data\": [{\r\n                        \"value\": 0\r\n                    }]\r\n                }]\r\n            }\r\n        };\r\n        this.chartConfigs = {\r\n            type: 'realtimeline',\r\n            renderAt: 'container',\r\n            width: '100%',\r\n            height: '350',\r\n            dataFormat: 'json'\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDataFor('btc-brl', 'btcbrl');\r\n        this.getDataFor('ltc-brl', 'ltcbrl');\r\n        this.getDataFor('eth-brl', 'ethbrl');\r\n    }\r\n\r\n    startUpdatingData(){\r\n        setInterval(() => {\r\n            fetch(this.BASE_URL + 'btc-brl')\r\n            .then(res => res.json())\r\n            .then(d => {\r\n                let x_axis = this.clientDateTime();\r\n                let y_axis = d.ticker.price;\r\n                this.chartRef.feedData(\"&label=\" + x_axis + \"&value=\" + y_axis);\r\n            });\r\n        }, 2000);\r\n    }\r\n\r\n\r\n    getDataFor(conversion, prop){\r\n        fetch(this.BASE_URL + conversion, {\r\n            mode: 'cors'\r\n        })\r\n        .then(res => res.json())\r\n        .then(d => {\r\n            if(prop === 'btcbrl'){\r\n                const dataSource = this.state.dataSource;\r\n                dataSource.chart.yAxisMaxValue =  parseInt(d.ticker.price) + 5;\r\n                dataSource.chart.yAxisMinValue =  parseInt(d.ticker.price) - 5;\r\n                dataSource.dataset[0]['data'][0].value = d.ticker.price;\r\n                this.setState({\r\n                    showChart: true,\r\n                    dataSource: dataSource,\r\n                    initValue: d.ticker.price\r\n                }, ()=>{\r\n                    \r\n                    this.startUpdatingData();\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                [prop]: d.ticker.price\r\n            });\r\n        })\r\n        \r\n    }\r\n\r\n    static addLeadingZero(num) {\r\n        return (num <= 9) ? (\"0\" + num) : num;\r\n    }\r\n\r\n\r\n    clientDateTime() {\r\n        var date_time = new Date();\r\n        var curr_hour = date_time.getHours();\r\n        var zero_added_curr_hour = Body.addLeadingZero(curr_hour);\r\n        var curr_min = date_time.getMinutes();\r\n        var curr_sec = date_time.getSeconds();\r\n        var curr_time = zero_added_curr_hour + ':' + curr_min + ':' + curr_sec;\r\n        return curr_time\r\n    }\r\n\r\n    getChartRef(chart){\r\n        this.chartRef = chart;\r\n        \r\n      \r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n        <div className=\"row mt-5 mt-xs-4\">\r\n            <div className=\"col-12 mb-3\">\r\n                 <div className=\"card-deck custom-card-deck\">\r\n                    <PriceCard header=\"Bitcoin(BTC)\" src={'/bitcoin.png'} alt=\"fireSpot\" label=\"(Price in brl)\"   value={this.state.btcbrl} />\r\n                    <PriceCard header=\"Litecoin(LTC)\"   src={'/litecoin.png'} alt=\"fireSpot\" label=\"(Price in brl)\"  value={this.state.ltcbrl}/>\r\n                    <PriceCard header=\"Ethereum(ETH)\" src={'/ethereum.png'} alt=\"fireSpot\" label=\"(Price in brl)\"    value={this.state.ethbrl}/>\r\n                    \r\n                   \r\n        \r\n\r\n                 </div>          \r\n            </div>\r\n            <div className=\"col-12\">\r\n                <div className=\"card custom-card mb-5 mb-xs-4\">\r\n                   <div className=\"card-body\">\r\n                            {\r\n                            this.state.showChart ? \r\n                            <ReactFC \r\n                            {...this.chartConfigs}\r\n                            dataSource={this.state.dataSource} \r\n                            onRender={this.getChartRef.bind(this)}/>: null\r\n                        }\r\n                   </div>\r\n                </div>\r\n            </div>\r\n\t\t</div>\r\n        )\r\n    }\r\n}\r\n\r\n export default Body;","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../src/style.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header branding=\"Real-Time Cryptocurrency Dashboard\" />\n        <div className=\"container\">\n          <Body />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}